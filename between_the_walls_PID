#include <SharpDistSensor.h> //IR sensor library

void rightEncoderEvent(void);
void rightEncoderEvent(void);
//void move_forward(void);
//void move_backward(void);
void right_turn(void);
void left_turn(void);
void go_straight(void);
bool encoder_state = false;

// pins for the encoder inputs
#define RH_ENCODER_A 2
#define RH_ENCODER_B 4
#define LH_ENCODER_A 5
#define LH_ENCODER_B 3
volatile unsigned long leftCount = 0;
volatile unsigned long rightCount = 0;

volatile unsigned long RH_totalcount = 0;

//pins for motor controls
#define RH_MOTOR_A 11
#define RH_MOTOR_B 10
#define RH_MOTOR_EN 9
#define LH_MOTOR_A 8
#define LH_MOTOR_B 7
#define LH_MOTOR_EN 6
int SPEED = 75;     //SET SPEED OF MOTORS HERE


//IR SENSOR SETUP:
//pins for IR sensors
const byte RH_IR_pin = A0;
const byte LH_IR_pin = A1;
const byte CN_IR_pin = A2;
//Window size of the median filter (odd number, 1 = no filtering)
const byte mediumFilterWindowSize = 5; 
// Create an object instance of the SharpDistSensor class
SharpDistSensor RH_IR(RH_IR_pin, mediumFilterWindowSize);
SharpDistSensor LH_IR(LH_IR_pin, mediumFilterWindowSize);
SharpDistSensor CN_IR(CN_IR_pin, mediumFilterWindowSize);
const float polyCoefficients[] = {449.65, -5.354, 0.0279, -7E-5, 6E-8};
const byte nbCoefficients = 5;
const unsigned int minVal = 67; // ~ 200mm    67
const unsigned int maxVal = 400; // ~20mm     362
unsigned int RH_dist_val = 0;
unsigned int LH_dist_val = 0;
unsigned int CN_dist_val = 0;

////////////////////////////           FOR PID       ////////////////////////////
float ERROR_CONSTANT_P = 2.1;
float ERROR_CONSTANT_I = 0.1;
float ERROR_CONSTANT_D = 0;
float proportional_feedback = 0;
float integral_feedback = 0;
float derivative_feedback = 0;
double desired_LH_val = 0;
double desired_RH_val = 0;
float error;
volatile float adjustAmount = 0;
// variables to store the number of encoder pulses for each motor

void setup() {
  //intialize encoders
  pinMode(LH_ENCODER_A, INPUT);
  pinMode(LH_ENCODER_B, INPUT);
  pinMode(RH_ENCODER_A, INPUT);
  pinMode(RH_ENCODER_B, INPUT);
  //initialize motors
  pinMode(RH_MOTOR_A, OUTPUT);
  pinMode(RH_MOTOR_B, OUTPUT);
  pinMode(LH_MOTOR_A, OUTPUT);
  pinMode(LH_MOTOR_B, OUTPUT);
  // initialize hardware interrupts
  attachInterrupt(digitalPinToInterrupt(LH_ENCODER_B), leftEncoderEvent, CHANGE);
  //attachInterrupt(digitalPinToInterrupt(LH_ENCODER_A), leftEncoderEvent, CHANGE);
  attachInterrupt(digitalPinToInterrupt(RH_ENCODER_A), rightEncoderEvent, CHANGE);
  //attachInterrupt(digitalPinToInterrupt(RH_ENCODER_B), rightEncoderEvent, CHANGE);

  RH_IR.setPolyFitCoeffs(nbCoefficients, polyCoefficients, minVal, maxVal);
  LH_IR.setPolyFitCoeffs(nbCoefficients, polyCoefficients, minVal, maxVal);
  CN_IR.setPolyFitCoeffs(nbCoefficients, polyCoefficients, minVal, maxVal);
  Serial.begin(9600); 
}

void loop() {
  move_forward();
  // Wait some time
  //delay(1000);
}

// encoder event for the interrupt call
void leftEncoderEvent() {
  if(encoder_state == 0){
    leftCount++;
  }else{
    leftCount--;
  }
}
// encoder event for the interrupt call
void rightEncoderEvent() {
  /*if(encoder_state == 0){
    total
    rightCount++;
  }else{
    rightCount--;
  }*/
  RH_totalcount++;
  if(RH_totalcount % 40 == 0)
  {
    get_dist(); //values are stored in RH_dist_val, LH_dist_val, CN_dist_val
    desired_RH_val = 31; //31 mm
    error = desired_RH_val - RH_dist_val;  //calculates error [SETPOINT - MEASURED]
    proportional_feedback = ERROR_CONSTANT_P * error;
    //integral_feedback = integral_feedback + error;
    adjustAmount = proportional_feedback * ERROR_CONSTANT_P + integral_feedback * ERROR_CONSTANT_I + derivative_feedback * ERROR_CONSTANT_D;
  }
}



void move_forward() {
  //NOTE: EDIT THIS TO MAKE ROBOT GO ON BLOCK FORWARD
  
  digitalWrite(RH_MOTOR_A, LOW);
  digitalWrite(RH_MOTOR_B, HIGH);
  digitalWrite(LH_MOTOR_A, HIGH);
  digitalWrite(LH_MOTOR_B, LOW);
  int  driveR = SPEED + adjustAmount;
  int driveL = SPEED;
  if((driveR) >= 120) {
    driveR = 120;
  }
  if((driveR) <= 25) {
    driveR = 25;
  }
  analogWrite(RH_MOTOR_EN, driveR);
  Serial.print("Right Motor = ");
  Serial.println(driveR);
  analogWrite(LH_MOTOR_EN, driveL);
  Serial.print("Left Motor = ");
  Serial.println(driveL);
  Serial.print("RH_dist_val = ");
  Serial.println(RH_dist_val);
}

void get_dist() {
  //read IR sensor values:
  RH_dist_val = RH_IR.getDist();
  LH_dist_val = LH_IR.getDist();
  CN_dist_val = CN_IR.getDist();

  
  if((RH_dist_val >= 60) && (RH_dist_val <= 200)){
    RH_dist_val = 60;
  }
  if(RH_dist_val > 200) {
    RH_dist_val = 0;
  }
  if((LH_dist_val >= 70) && (LH_dist_val <= 200)){
    LH_dist_val = 70;
  }
  if(LH_dist_val > 200) {
    LH_dist_val = 0;
  }
}